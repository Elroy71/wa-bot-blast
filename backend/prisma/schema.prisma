// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// [PERUBAHAN] Enum baru untuk Gender
enum Gender {
  Pria
  Wanita
}

// [PERUBAHAN] Model Contact
model Contact {
  id        Int           @id @default(autoincrement())
  name      String
  phone     String        @unique // Diubah dari phoneNumber
  email     String?
  gender    Gender?       // Ditambahkan, opsional

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // [TAMBAHAN] Relasi many-to-many dengan Group
  // Menandakan bahwa satu kontak bisa menjadi anggota banyak grup
  groups    GroupMember[]
  blastLogs     BlastRecipientLog[] @relation("BlastToContact")
}

// Model untuk Group
model Group {
  id          Int      @id @default(autoincrement())
  name        String
  description String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // [PERUBAHAN] Relasi ke tabel perantara GroupMember
  members     GroupMember[]
  targetedByBlasts BlastGroup[]
}

// [BARU] Model untuk tabel perantara (explicit many-to-many)
model GroupMember {
  // Relasi ke Group
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   Int

  // Relasi ke Contact
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  contactId Int

  // Informasi tambahan pada relasi
  assignedAt DateTime @default(now())

  // Membuat composite primary key untuk memastikan
  // satu kontak hanya bisa masuk satu kali ke dalam grup yang sama.
  @@id([groupId, contactId])
}


// Model untuk whatsapp sender
model WhatsappSender {
  id        Int       @id @default(autoincrement())
  name      String
  phone     String    @unique
  status    SenderStatus @default(unpaired)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Kolom aiAgentId (String) dihapus dari sini karena tidak benar.
  // Relasi sekarang sepenuhnya dikelola oleh model AiAgent.
  aiAgent   AiAgent?  @relation("SenderToAgent")
  blasts    Blast[]
}

// Enum untuk status sender
enum SenderStatus {
  paired
  unpaired
}


// Model untuk AI Agent
model AiAgent {
  id            Int       @id @default(autoincrement())
  name          String
  company       String?
  languageStyle LanguageStyle @default(Santai)
  behavior      String    @db.Text
  status        AgentStatus  @default(inactive)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relasi one-to-one dengan WhatsappSender
  senderId      Int?      @unique
  connectedSender WhatsappSender? @relation("SenderToAgent", fields: [senderId], references: [id])

  // Relasi one-to-many ke Knowledge Base
  knowledge     AiKnowledge[]

  // Relasi one-to-many ke Test Conversations
  testConversations AiTestConversation[]
}
// --- ENUMS ---
enum AgentStatus {
  active
  inactive
}

// Enum disesuaikan dengan Frontend (Bahasa Indonesia)
enum LanguageStyle {
  Formal
  Profesional
  Santai
  Humoris
  Percakapan_sehari_hari
}

// Model untuk Knowledge Base milik AI Agent
model AiKnowledge {
  id          Int            @id @default(autoincrement())
  aiAgentId   Int
  title       String
  category    KnowledgeCategory @default(Panduan)
  contentText String         @db.Text
  filePdf     String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  aiAgent     AiAgent        @relation(fields: [aiAgentId], references: [id], onDelete: Cascade)
}
enum KnowledgeCategory {
  Panduan
  Layanan
  Produk
  Best_Practice
  Tips_Trik
}

// Model untuk menyimpan riwayat percakapan tes
model AiTestConversation {
  id          Int      @id @default(autoincrement())
  aiAgentId   Int
  userMessage String   @db.Text
  aiResponse  String   @db.Text
  createdAt   DateTime @default(now())

  aiAgent     AiAgent  @relation(fields: [aiAgentId], references: [id], onDelete: Cascade)
}

// =================================
// [BARU] MODEL-MODEL UNTUK FITUR BLAST
// =================================

enum BlastStatus {
  SCHEDULED
  SENDING
  COMPLETED
  FAILED
  PAUSED
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}

model Blast {
  id                Int      @id @default(autoincrement())
  title             String
  message           String   @db.Text
  status            BlastStatus @default(SCHEDULED)
  
  whatsappSenderId  Int
  whatsappSender    WhatsappSender @relation(fields: [whatsappSenderId], references: [id])

  scheduledAt       DateTime?
  startedAt         DateTime?
  completedAt       DateTime?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  targetGroups      BlastGroup[]
  attachments       BlastAttachment[]
  recipientLogs     BlastRecipientLog[]
}

model BlastGroup {
  blastId   Int
  groupId   Int

  blast     Blast @relation(fields: [blastId], references: [id], onDelete: Cascade)
  group     Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([blastId, groupId])
}

model BlastAttachment {
  id        Int      @id @default(autoincrement())
  blastId   Int
  filePath  String
  fileType  String
  
  blast     Blast    @relation(fields: [blastId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model BlastRecipientLog {
  id          Int      @id @default(autoincrement())
  blastId     Int
  contactId   Int
  
  status      MessageStatus @default(PENDING)
  sentAt      DateTime?
  deliveredAt DateTime?
  readAt      DateTime?
  failedReason String?

  blast       Blast    @relation(fields: [blastId], references: [id], onDelete: Cascade)
  contact     Contact  @relation("BlastToContact", fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([blastId, contactId])
}
